# generated by datamodel-codegen:
#   filename:  hatch.json
#   timestamp: 2024-11-17T16:22:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class Platform(Enum):
    linux = 'linux'
    windows = 'windows'
    macos = 'macos'


class Format(BaseModel):
    config_path: Optional[str] = Field(
        None,
        alias='config-path',
        description='Path to default configuration',
        title='Config-Path',
    )


class Metadata(BaseModel):
    allow_direct_references: Optional[bool] = Field(
        None,
        alias='allow-direct-references',
        description='Whether to allow direct references',
        title='Allow-Direct-References',
    )
    allow_ambiguous_features: Optional[bool] = Field(
        None,
        alias='allow-ambiguous-features',
        description='Whether to allow ambiguous features',
        title='Allow-Ambiguous-Features',
    )


class Override(BaseModel):
    __root__: Any = Field(..., description='TODO', title='Override')


class Overrides(BaseModel):
    platform: Optional[Dict[str, Override]] = None


class Env(BaseModel):
    template: Optional[str] = Field(
        'default',
        description='Template environment to inherit from. Set to own name to make self referential (disable inheritance from “default”)',
        title='Template',
    )
    detached: Optional[bool] = Field(
        False,
        description='Make the environment self-referential and skip project install',
        title='Detached',
    )
    dependencies: Optional[List[str]] = Field(
        None,
        description='List of dependencies to install in the environment',
        title='Dependencies',
    )
    extra_dependencies: Optional[List[str]] = Field(
        None,
        alias='extra-dependencies',
        description='List of extra dependencies to install in the environment in addition to the template environment’s dependencies',
        title='Extra dependencies',
    )
    features: Optional[List[str]] = Field(
        None,
        description='List of optional dependency groups (extras) to install',
        title='Features (extras)',
    )
    dev_mode: Optional[bool] = Field(
        True,
        alias='dev-mode',
        description='Whether to install the project in development mode',
        title='Dev mode',
    )
    skip_install: Optional[bool] = Field(
        False,
        alias='skip-install',
        description='Whether to skip installing the project',
        title='Skip install',
    )
    env_vars: Optional[Dict[str, str]] = Field(
        None,
        alias='env-vars',
        description='Environment variables to set',
        title='Environment variables',
    )
    env_include: Optional[List[str]] = Field(
        None,
        alias='env-include',
        description='Glob patterns of environment variables to include',
        title='Environment variable include',
    )
    env_exclude: Optional[List[str]] = Field(
        None,
        alias='env-exclude',
        description='Glob patterns of environment variables to exclude',
        title='Environment variable exclude',
    )
    scripts: Optional[Dict[str, Union[str, List[str]]]] = Field(
        None, description='Dictionary of scripts to run', title='Scripts'
    )
    pre_install_commands: Optional[List[str]] = Field(
        None,
        alias='pre-install-commands',
        description='List of commands to run before installing the project',
        title='Pre-install commands',
    )
    post_install_commands: Optional[List[str]] = Field(
        None,
        alias='post-install-commands',
        description='List of commands to run after installing the project',
        title='Post-install commands',
    )
    python: Optional[str] = Field(
        None,
        description='Python version to use or an absolute path to a python interpreter',
        title='Python version',
    )
    platforms: Optional[List[Platform]] = Field(
        None, description='List of platforms to build for', title='Platforms'
    )
    description: Optional[str] = Field(
        None,
        description='Description of the environment for the `env show` command',
        title='Description',
    )
    type: Optional[str] = Field(
        'virtual',
        description='Type of environment. Without plugins, the only supported type is "virtual"',
        title='Type',
    )
    matrix: Optional[List[Dict[str, List[str]]]] = Field(
        None, description='Matrix of environments', title='Matrix'
    )
    matrix_name_format: Optional[str] = Field(
        '{value}',
        alias='matrix-name-format',
        description='Format string for matrix names, supporting {variable} and {value} placeholders',
        title='Matrix name format',
    )
    overrides: Optional[Overrides] = None
    requires: Optional[List[str]] = Field(
        None, description='Required environment plugins', title='Requires'
    )


class Envs(BaseModel):
    __root__: Optional[Dict[str, Env]] = None


class CollectorEnv(BaseModel):
    collectors: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='Custom environment collectors', title='Collectors'
    )
    requires: Optional[List[str]] = Field(
        None,
        description='Required environment collectors for automatic management',
        title='Requires',
    )


class Target(BaseModel):
    dependencies: Optional[List[str]] = Field(
        None,
        description='Additional dependencies to install in the environment',
        title='Dependencies',
    )
    require_runtime_dependencies: Optional[bool] = Field(
        False,
        alias='require-runtime-dependencies',
        description='Whether to install the project’s runtime dependencies',
        title='Require runtime dependencies',
    )
    require_runtime_features: Optional[List[str]] = Field(
        None,
        alias='require-runtime-features',
        description='A list of the project’s runtime features to install',
        title='Required runtime features',
    )
    versions: Optional[List[str]] = Field(
        None, description='List of versions to build', title='Versions'
    )


class CustomTargets(BaseModel):
    __root__: Optional[Dict[str, Target]] = None


class Hook(BaseModel):
    dependencies: Optional[List[str]] = Field(
        None,
        description='Additional dependencies installed in the build environment',
        title='Dependencies',
    )
    require_runtime_dependencies: Optional[bool] = Field(
        False,
        alias='require-runtime-dependencies',
        description='Whether to install the project’s runtime dependencies',
        title='Require runtime dependencies',
    )
    require_runtime_features: Optional[List[str]] = Field(
        None,
        alias='require-runtime-features',
        description='A list of the project’s runtime features to install',
        title='Required runtime features',
    )
    enable_by_default: Optional[bool] = Field(
        True,
        alias='enable-by-default',
        description='Whether to enable current hook (disable to control activation using environment variables)',
        title='Conditional execution',
    )


class Hooks(BaseModel):
    __root__: Optional[Dict[str, Hook]] = None


class Build1(BaseModel):
    ignore_vcs: Optional[bool] = Field(
        False,
        alias='ignore-vcs',
        description='Whether to ignore VCS .*ignore files and include those files by default',
        title='Ignore VCS in file selection',
    )
    include: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to include files',
        title='Include files',
    )
    exclude: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to exclude files',
        title='Exclude files',
    )
    artifacts: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to include VCS-ignored files',
        title='Artifact files',
    )
    only_packages: Optional[bool] = Field(
        False,
        alias='only-packages',
        description='Whether to only include non-artifact files in packages',
        title='Excluding files outside packages',
    )
    sources: Optional[Union[Dict[str, str], List[str]]] = Field(
        None, description='Rewrite relative paths', title='Sources'
    )
    skip_excluded_dirs: Optional[bool] = Field(
        False,
        alias='skip-excluded-dirs',
        description='Whether to skip excluded directories (for performance reasons)',
        title='Skip excluded dirs',
    )
    reproducible: Optional[bool] = Field(
        True, description='Whether to make the build reproducible', title='Reproducible'
    )
    directory: Optional[str] = Field(
        'dist',
        description='Directory to write build artifacts to',
        title='Output directory',
    )
    dev_mode_dirs: Optional[Any] = Field(None, alias='dev-mode-dirs')
    dev_mode_exact: Optional[bool] = Field(
        None,
        alias='dev-mode-exact',
        description='Whether to use an exact dev mode that doesn’t add whole directories to PYTHONPATH',
        title='Exact dev mode',
    )
    targets: Optional[CustomTargets] = None
    hooks: Optional[Hooks] = None


class Build2(BaseModel):
    ignore_vcs: Optional[bool] = Field(
        False,
        alias='ignore-vcs',
        description='Whether to ignore VCS .*ignore files and include those files by default',
        title='Ignore VCS in file selection',
    )
    include: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to include files',
        title='Include files',
    )
    exclude: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to exclude files',
        title='Exclude files',
    )
    artifacts: Optional[List[str]] = Field(
        None,
        description='List of glob patterns to include VCS-ignored files',
        title='Artifact files',
    )
    only_packages: Optional[bool] = Field(
        False,
        alias='only-packages',
        description='Whether to only include non-artifact files in packages',
        title='Excluding files outside packages',
    )
    sources: Optional[Union[Dict[str, str], List[str]]] = Field(
        None, description='Rewrite relative paths', title='Sources'
    )
    skip_excluded_dirs: Optional[bool] = Field(
        False,
        alias='skip-excluded-dirs',
        description='Whether to skip excluded directories (for performance reasons)',
        title='Skip excluded dirs',
    )
    reproducible: Optional[bool] = Field(
        True, description='Whether to make the build reproducible', title='Reproducible'
    )
    directory: Optional[str] = Field(
        'dist',
        description='Directory to write build artifacts to',
        title='Output directory',
    )
    dev_mode_dirs: Optional[List[str]] = Field(
        None,
        alias='dev-mode-dirs',
        description='List of directories to add to PYTHONPATH in development mode',
        title='Dev mode directories',
    )
    dev_mode_exact: Optional[Any] = Field(None, alias='dev-mode-exact')
    targets: Optional[CustomTargets] = None
    hooks: Optional[Hooks] = None


class Build(BaseModel):
    __root__: Union[Build1, Build2] = Field(
        ..., description='Build configuration', title='Build'
    )


class Version(BaseModel):
    path: Optional[str] = Field(
        None,
        description='A relative path to a file containing the project version',
        title='Path',
    )
    pattern: Optional[str] = Field(
        None, description='A regex pattern to extract the version', title='Pattern'
    )


class Repos(BaseModel):
    main: Optional[Any] = None
    test: Optional[Any] = None


class PublishIndex(BaseModel):
    disable: Optional[bool] = Field(
        False,
        description='Ask for confirmation when publishing to index',
        title='Confirmation',
    )
    repos: Optional[Repos] = Field(
        None,
        description='Define named repositories to publish to',
        title='Repositories',
    )


class Publish(BaseModel):
    index: Optional[PublishIndex] = None


class Hatch1(BaseModel):
    class Config:
        extra = Extra.forbid

    metadata: Optional[Metadata] = None
    env: Optional[CollectorEnv] = None
    envs: Optional[Envs] = None
    build: Optional[Build] = None
    version: Optional[Any] = None
    publish: Optional[Publish] = None


class Hatch2(BaseModel):
    class Config:
        extra = Extra.forbid

    metadata: Optional[Metadata] = None
    env: Optional[CollectorEnv] = None
    envs: Optional[Envs] = None
    build: Optional[Build] = None
    version: Version
    publish: Optional[Publish] = None


class Hatch(BaseModel):
    class Config:
        extra = Extra.forbid

    __root__: Union[Hatch1, Hatch2] = Field(..., title='Hatch')
