# generated by datamodel-codegen:
#   filename:  zenoh.json
#   timestamp: 2024-11-14T16:03:40+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Metadata(BaseModel):
    name: str
    location: str


class TimeoutMs(BaseModel):
    router: int
    peer: int
    client: int


class ExitOnFailure(BaseModel):
    router: bool
    peer: bool
    client: bool


class Retry(BaseModel):
    period_init_ms: int
    period_max_ms: int
    period_increase_factor: int


class Connect(BaseModel):
    timeout_ms: TimeoutMs
    endpoints: List[str]
    exit_on_failure: ExitOnFailure
    retry: Retry


class Endpoints(BaseModel):
    router: List[str]
    peer: List[str]


class Listen(BaseModel):
    timeout_ms: int
    endpoints: Endpoints
    exit_on_failure: bool
    retry: Retry


class ReturnConditions(BaseModel):
    connect_scouted: bool
    declares: bool


class Open(BaseModel):
    return_conditions: ReturnConditions


class Autoconnect(BaseModel):
    router: List
    peer: List[str]


class Multicast(BaseModel):
    enabled: bool
    address: str
    interface: str
    ttl: int
    autoconnect: Autoconnect
    listen: bool


class Gossip(BaseModel):
    enabled: bool
    multihop: bool
    autoconnect: Autoconnect


class Scouting(BaseModel):
    timeout: int
    delay: int
    multicast: Multicast
    gossip: Gossip


class Enabled(BaseModel):
    router: bool
    peer: bool
    client: bool


class Timestamping(BaseModel):
    enabled: Enabled
    drop_future_timestamp: bool


class Router(BaseModel):
    peers_failover_brokering: bool


class Peer(BaseModel):
    mode: str


class Routing(BaseModel):
    router: Router
    peer: Peer


class Aggregation(BaseModel):
    subscribers: List[str]
    publishers: List[str]


class Rule(BaseModel):
    key_expr: str
    freq: float


class DownsamplingItem(BaseModel):
    interfaces: List[str]
    flow: str
    rules: List[Rule]


class Rule1(BaseModel):
    id: str
    messages: List[str]
    flows: List[str]
    permission: str
    key_exprs: List[str]


class Subject(BaseModel):
    id: str
    interfaces: List[str] | None = None
    cert_common_names: List[str] | None = None
    usernames: List[str] | None = None


class Policy(BaseModel):
    rules: List[str]
    subjects: List[str]


class AccessControl(BaseModel):
    enabled: bool
    default_permission: str
    rules: List[Rule1]
    subjects: List[Subject]
    policies: List[Policy]


class Qos(BaseModel):
    enabled: bool


class Compression(BaseModel):
    enabled: bool


class Unicast(BaseModel):
    accept_timeout: int
    accept_pending: int
    max_sessions: int
    max_links: int
    lowlatency: bool
    qos: Qos
    compression: Compression


class Multicast1(BaseModel):
    join_interval: int
    max_sessions: int
    qos: Qos
    compression: Compression


class Size(BaseModel):
    control: int
    real_time: int
    interactive_high: int
    interactive_low: int
    data_high: int
    data: int
    data_low: int
    background: int


class Drop(BaseModel):
    wait_before_drop: int


class Block(BaseModel):
    wait_before_close: int


class CongestionControl(BaseModel):
    drop: Drop
    block: Block


class Batching(BaseModel):
    enabled: bool
    time_limit: int


class Queue(BaseModel):
    size: Size
    congestion_control: CongestionControl
    batching: Batching


class Tx(BaseModel):
    sequence_number_resolution: str
    lease: int
    keep_alive: int
    batch_size: int
    queue: Queue


class Rx(BaseModel):
    buffer_size: int
    max_message_size: int


class Tls(BaseModel):
    root_ca_certificate: None
    listen_private_key: None
    listen_certificate: None
    enable_mtls: bool
    connect_private_key: None
    connect_certificate: None
    verify_name_on_connect: bool


class Link(BaseModel):
    tx: Tx
    rx: Rx
    tls: Tls


class SharedMemory(BaseModel):
    enabled: bool


class Usrpwd(BaseModel):
    user: None
    password: None
    dictionary_file: None


class Pubkey(BaseModel):
    public_key_pem: None
    private_key_pem: None
    public_key_file: None
    private_key_file: None
    key_size: None
    known_keys_file: None


class Auth(BaseModel):
    usrpwd: Usrpwd
    pubkey: Pubkey


class Transport(BaseModel):
    unicast: Unicast
    multicast: Multicast1
    link: Link
    shared_memory: SharedMemory
    auth: Auth


class Permissions(BaseModel):
    read: bool
    write: bool


class Adminspace(BaseModel):
    enabled: bool
    permissions: Permissions


class SearchDirs(BaseModel):
    kind: str


class PluginsLoading(BaseModel):
    enabled: bool
    search_dirs: List[str | SearchDirs]


class Rest(BaseModel):
    field__required__: bool = Field(..., alias='__required__')
    field__config__: str = Field(..., alias='__config__')
    http_port: int
    work_thread_num: int
    max_block_thread_num: int


class Private(BaseModel):
    username: str
    password: str


class Influxdb(BaseModel):
    url: str
    private: Private


class Influxdb2(BaseModel):
    backend: str
    private: Private
    url: str


class Volumes(BaseModel):
    influxdb: Influxdb
    influxdb2: Influxdb2


class Demo(BaseModel):
    key_expr: str
    volume: str


class GarbageCollection(BaseModel):
    period: int
    lifespan: int


class Replication(BaseModel):
    interval: float
    sub_intervals: int
    hot: int
    warm: int
    propagation_delay: int


class Demo2(BaseModel):
    key_expr: str
    strip_prefix: str
    volume: str
    garbage_collection: GarbageCollection
    replication: Replication


class Demo3(BaseModel):
    key_expr: str
    volume: str
    complete: str


class Volume(BaseModel):
    id: str
    db: str


class InfluxDemo(BaseModel):
    key_expr: str
    strip_prefix: str
    volume: Volume


class InfluxDemo2(BaseModel):
    key_expr: str
    strip_prefix: str
    volume: Volume


class Storages(BaseModel):
    demo: Demo
    demo2: Demo2
    demo3: Demo3
    influx_demo: InfluxDemo
    influx_demo2: InfluxDemo2


class StorageManager(BaseModel):
    field__path__: List[str] = Field(..., alias='__path__')
    backend_search_dirs: List
    volumes: Volumes
    storages: Storages


class Plugins(BaseModel):
    rest: Rest
    storage_manager: StorageManager


class Model(BaseModel):
    id: str
    mode: str
    metadata: Metadata
    connect: Connect
    listen: Listen
    open: Open
    scouting: Scouting
    timestamping: Timestamping
    queries_default_timeout: int
    routing: Routing
    aggregation: Aggregation
    downsampling: List[DownsamplingItem]
    access_control: AccessControl
    transport: Transport
    adminspace: Adminspace
    plugins_loading: PluginsLoading
    plugins: Plugins
